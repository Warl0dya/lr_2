# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_b7JAMW1EUqVEDK_AS1WJgx-9qh_-G-C

Завдання 1
"""

# Імпорт необхідних бібліотек
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score
# Вхідний файл із даними
input_file = 'income_data.txt'
# Читання даних
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 25000
# Відкриття файлу та читання рядків
with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        # Розбиття рядка та відокремлення мітки класу
        data = line.strip().split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data[:-1])
            y.append(0)  # Клас 0 для '<=50K'
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data[:-1])
            y.append(1)  # Клас 1 для '>50K'
            count_class2 += 1
# Перетворення на масив numpy
X = np.array(X)
y = np.array(y)
# Кодування рядкових даних у числові
label_encoder = []
X_encoded = np.empty(X.shape)
for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i].astype(float)
    else:
        encoder = preprocessing.LabelEncoder()
        X_encoded[:, i] = encoder.fit_transform(X[:, i])
        label_encoder.append(encoder)
# Відокремлення ознак і міток
X = X_encoded.astype(float)
# Створення SVM-класифікатора з лінійним ядром
classifier = OneVsOneClassifier(LinearSVC(random_state=0))
# Розбиття даних на тренувальний та тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)
# Навчання класифікатора
classifier.fit(X_train, y_train)
# Прогнозування результатів для тестового набору
y_test_pred = classifier.predict(X_test)
# Обчислення F1-міри та інших показників якості
f1 = f1_score(y_test, y_test_pred, average='weighted')
accuracy = accuracy_score(y_test, y_test_pred)
recall = recall_score(y_test, y_test_pred, average='weighted')
precision = precision_score(y_test, y_test_pred, average='weighted')
print("F1 score: {:.2f}%".format(f1 * 100))
print("Accuracy: {:.2f}%".format(accuracy * 100))
print("Recall: {:.2f}%".format(recall * 100))
print("Precision: {:.2f}%".format(precision * 100))
# Передбачення для тестової точки даних
input_data = ['37', 'Private', '215646', 'HS-grad', '9', 'Never-married', 'Handlers-cleaners', 'Not-in-family', 'White', 'Male', '0', '0', '40', 'United-States']
# Кодування тестової точки даних
input_data_encoded = np.empty(len(input_data))
count = 0  # Лічильник для label_encoder
for i, item in enumerate(input_data):
    if item.isdigit():
        input_data_encoded[i] = int(item)
    else:
        input_data_encoded[i] = label_encoder[count].transform([item])[0]
        count += 1  # Збільшити лічильник тільки для текстових даних
# Перетворення у numpy масив
input_data_encoded = np.array(input_data_encoded)
# Використання класифікатора для передбачення результату
predicted_class = classifier.predict([input_data_encoded])
predicted_label = label_encoder[-1].inverse_transform(predicted_class)
print("Predicted class for the input data:", predicted_label[0])

"""Завдання 2"""

# Імпорт необхідних бібліотек
import numpy as np
from sklearn import preprocessing
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score
# Вхідний файл із даними
input_file = 'income_data.txt'
# Читання та підготовка даних (такий самий процес, як у попередньому завданні)
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 2500
# Відкриття файлу та читання рядків
with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        data = line.strip().split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data[:-1])
            y.append(0)
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data[:-1])
            y.append(1)
            count_class2 += 1
# Перетворення на масив numpy та кодування текстових даних
X = np.array(X)
y = np.array(y)
label_encoder = []
X_encoded = np.empty(X.shape)
for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i].astype(float)
    else:
        encoder = preprocessing.LabelEncoder()
        X_encoded[:, i] = encoder.fit_transform(X[:, i])
        label_encoder.append(encoder)
X = X_encoded.astype(float)
# Розбиття даних на тренувальний та тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)
# Функція для навчання, прогнозування та оцінки класифікатора з різними ядрами
def evaluate_svm_kernel(kernel_name):
    classifier = SVC(kernel=kernel_name, random_state=0)
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    # Обчислення показників якості
    f1 = f1_score(y_test, y_pred, average='weighted')
    accuracy = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred, average='weighted')
    precision = precision_score(y_test, y_pred, average='weighted')
    print(f"Kernel: {kernel_name}")
    print("F1 score: {:.2f}%".format(f1 * 100))
    print("Accuracy: {:.2f}%".format(accuracy * 100))
    print("Recall: {:.2f}%".format(recall * 100))
    print("Precision: {:.2f}%".format(precision * 100))
    print("")
# Оцінка для поліноміального, гаусового (RBF) та сигмоїдального ядер
evaluate_svm_kernel('poly')
evaluate_svm_kernel('rbf')
evaluate_svm_kernel('sigmoid')

"""Завдання 3

Крок 1
"""

from sklearn.datasets import load_iris

# Завантаження даних
iris_dataset = load_iris()

# Виведення ключів об'єкта iris_dataset
print("Ключі iris_dataset:\n{}".format(iris_dataset.keys()))

# Виведення опису набору даних
print(iris_dataset['DESCR'][:193] + "\n...")

# Виведення назв сортів ірисів, які ми хочемо передбачити
print("Назви відповідей:\n{}".format(iris_dataset['target_names']))

# Виведення назв ознак
print("Назва ознак:\n{}".format(iris_dataset['feature_names']))

# Виведення типу масиву data
print("Тип масиву data: {}".format(type(iris_dataset['data'])))

# Виведення форми масиву data
print("Форма масиву data:\n{}".format(iris_dataset['data'].shape))

# Виведення значень ознак для перших п'яти прикладів
print("Значення ознак для перших п'яти прикладів:\n{}".format(iris_dataset['data'][:5]))

# Виведення типу масиву target
print("Тип масиву target: {}".format(type(iris_dataset['target'])))

# Виведення відповідей (сорти ірисів у числовому форматі)
print("Відповіді:\n{}".format(iris_dataset['target']))

"""Крок 2"""

# Завантаження необхідних бібліотек
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
# Завантаження датасету з URL
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = read_csv(url, names=names)
# Перевірка розміру датасету
print("Розмір датасету (кількість екземплярів і атрибутів):", dataset.shape)
# Виведення перших 20 рядків даних
print("\nПерші 20 рядків датасету:")
print(dataset.head(20))
# Статистичне зведення кожного атрибута
print("\nСтатистичне зведення датасету:")
print(dataset.describe())
# Розподіл за атрибутом 'class'
print("\nРозподіл класів:")
print(dataset.groupby('class').size())
# КРОК 2. Візуалізація даних
# Діаграма розмаху (boxplot) для кожного атрибута
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.suptitle("Діаграма розмаху атрибутів")
plt.show()
# Гістограма для кожного атрибута
dataset.hist()
plt.suptitle("Гістограма розподілу атрибутів")
plt.show()
# Матриця діаграм розсіювання
scatter_matrix(dataset)
plt.suptitle("Матриця діаграм розсіювання")
plt.show()

"""Крок 3"""

from sklearn.model_selection import train_test_split

# Перетворення датасету на NumPy масив
array = dataset.values

# Вибір перших 4-х стовпців як X (вхідні дані)
X = array[:, 0:4]

# Вибір 5-го стовпця як y (цільова змінна)
y = array[:, 4]

# Розподіл даних на навчальний (X_train, y_train) та тестовий (X_test, y_test) набори
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)

# Перевірка розмірів наборів
print(f"Розмір навчального набору: {X_train.shape}")
print(f"Розмір тестового набору: {X_validation.shape}")

"""Крок 4"""

# Імпортуємо необхідні бібліотеки
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import StratifiedKFold, cross_val_score
from matplotlib import pyplot

# Завантажуємо алгоритми моделей
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# Оцінка моделей
results = []
names = []
for name, model in models:
    # Використовуємо 10-кратну крос-валідацію
    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')

    # Додаємо результати
    results.append(cv_results)
    names.append(name)

    # Виводимо середнє значення точності та стандартне відхилення для кожної моделі
    print(f'{name}: {cv_results.mean():.6f} ({cv_results.std():.6f})')
# Побудова діаграми розмаху для порівняння точності моделей
pyplot.boxplot(results, labels=names)
pyplot.title('Algorithm Comparison')
pyplot.show()

"""Крок 6"""

# Створюємо прогноз на контрольній вибірці
model = SVC(gamma='auto')
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)

"""Крок 7"""

# Оцінюємо прогноз
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

"""Крок 8"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Завантажуємо набір даних Iris
iris_dataset = load_iris()
X = iris_dataset.data
y = iris_dataset.target

# Розділяємо дані на тренувальну і тестову вибірку
X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.3, random_state=42)

# Створюємо і навчаємо модель KNN
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Новий зразок (ірис з довжиною чашолистки 5 см, шириною чашолистки 2.9 см, довжиною пелюстки 1 см і шириною пелюстки 0.2 см)
X_new = np.array([[5, 2.9, 1, 0.2]])

# Робимо прогноз для нового зразка
prediction = knn.predict(X_new)

# Виводимо результат
print("Форма масиву X_new: {}".format(X_new.shape))
print("Прогноз: {}".format(prediction))
print("Спрогнозована мітка: {}".format(iris_dataset['target_names'][prediction]))

"""Завдання 4"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
# Читання та підготовка даних з файлу
input_file = 'income_data.txt'
X = []  # Ознаки
y = []  # Мітки класів
count_class1 = 0  # Клас 0
count_class2 = 0  # Клас 1
max_datapoints = 2500  # Максимальна кількість даних
# Читання даних
with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        # Розбиття рядка та відокремлення мітки класу
        data = line.strip().split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data[:-1])
            y.append(0)  # Клас 0 для '<=50K'
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data[:-1])
            y.append(1)  # Клас 1 для '>50K'
            count_class2 += 1
# Перетворення на масив numpy
X = np.array(X)
y = np.array(y)
# Кодування категоріальних змінних
label_encoder = []
X_encoded = np.empty(X.shape)
for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i].astype(float)
    else:
        encoder = preprocessing.LabelEncoder()
        X_encoded[:, i] = encoder.fit_transform(X[:, i])
        label_encoder.append(encoder)
# Перетворення у масив numpy
X = X_encoded.astype(float)
# Розбиття даних на тренувальний та тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)
# Алгоритми класифікації
models = [
    ('LR', LogisticRegression(solver='liblinear', multi_class='ovr')),
    ('LDA', LinearDiscriminantAnalysis()),
    ('KNN', KNeighborsClassifier()),
    ('CART', DecisionTreeClassifier()),
    ('NB', GaussianNB()),
    ('SVM', SVC(gamma='auto'))
]
# Оцінка моделей
results = []
names = []
for name, model in models:
    # Використовуємо крос-валідацію для оцінки моделі
    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print(f'{name}: {cv_results.mean():.4f} ({cv_results.std():.4f})')
# Візуалізація результатів
plt.boxplot(results, labels=names)
plt.title('Algorithm Comparison')
plt.show()
# Навчання та оцінка кожної моделі на тестових даних
for name, model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred, average='weighted')
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    print(f'{name} - Accuracy: {accuracy:.2f}, F1-Score: {f1:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}')

"""Завдання 5"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import RidgeClassifier
from sklearn import metrics
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from io import BytesIO
# Завантаження набору даних Iris
iris = load_iris()
X, y = iris.data, iris.target
# Розбиття на тренувальний та тестовий набори
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=0)
# Ініціалізація класифікатора Ridge
clf = RidgeClassifier(tol=1e-2, solver="sag")
clf.fit(Xtrain, ytrain)
# Прогнозування на тестовому наборі
ypred = clf.predict(Xtest)
# Оцінка точності
print('Accuracy:', np.round(metrics.accuracy_score(ytest, ypred), 4))
print('Precision:', np.round(metrics.precision_score(ytest, ypred, average='weighted'), 4))
print('Recall:', np.round(metrics.recall_score(ytest, ypred, average='weighted'), 4))
print('F1 Score:', np.round(metrics.f1_score(ytest, ypred, average='weighted'), 4))
print('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(ytest, ypred), 4))
print('Matthews Corrcoef:', np.round(metrics.matthews_corrcoef(ytest, ypred), 4))
# Класифікаційний звіт
print('\t\tClassification Report:\n', metrics.classification_report(ytest, ypred))
# Матриця плутанини
mat = confusion_matrix(ytest, ypred)
sns.set()  # Покращення стилю для графіків
# Створення теплової карти для матриці плутанини
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)
plt.xlabel('True label')
plt.ylabel('Predicted label')
plt.savefig("Confusion.jpg")  # Збереження зображення
# Збереження в форматі SVG
f = BytesIO()
plt.savefig(f, format="svg")